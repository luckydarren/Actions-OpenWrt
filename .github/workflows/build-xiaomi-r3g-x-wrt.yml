#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#
# firmware path:openwrt/bin/targets,eg:openwrt/bin/targets/ramips/mt7621
# packages path:openwrt/bin/packages,eg:openwrt/bin/packages/mipsel_24kc
name: Build Lean's OpenWrt For xiaomi-r3g

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      # tag:
      #   description: 'Tag for X-Wrt'
      #   required: true
      #   default: '21.10_b202201172351'

env:
  REPO_URL: https://github.com/x-wrt/x-wrt
  REPO_BRANCH: master
  FEEDS_CONF: xiaomi-r3g/x-wrt/feeds.conf.default
  CONFIG_FILE: xiaomi-r3g/x-wrt/.config
  DIY_P1_SH: xiaomi-r3g/x-wrt/diy-part1.sh
  DIY_P2_SH: xiaomi-r3g/x-wrt/diy-part2.sh
  UPLOAD_PACKAGES: false
  UPLOAD_FIRMWARE: false
  UPLOAD_FIRMWARE_TO_COWTRANSFER: false
  UPLOAD_FIRMWARE_TO_WETRANSFER: false
  UPLOAD_PACKAGES_TO_COWTRANSFER: false
  UPLOAD_PACKAGES_TO_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        git checkout -f 21.10_b202201172351
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Zip packages and firmware directory
      id: zip
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin
        zip -r packages.zip packages
        zip -r firmware.zip targets
        echo "::set-output name=status::success"

    - name: Upload packages to artifact
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_PACKAGES == 'true' && !cancelled()
      with:
        name: OpenWrt_packages${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin/packages

    - name: Upload firmware to artifact
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin/targets

    - name: Upload firmware to cowtransfer
      id: cowtransfer_firmware
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE_TO_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress openwrt/bin/targets 2>&1 | tee cowtransfer_firmware.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer_firmware.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer_firmware.log | grep https | cut -f3 -d" ")"

    - name: Upload firmware to WeTransfer
      id: wetransfer_firmware
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE_TO_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress openwrt/bin/targets 2>&1 | tee wetransfer_firmware.log
        echo "::warning file=wetransfer.com::$(cat wetransfer_firmware.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer_firmware.log | grep https | cut -f3 -d" ")"

    - name: Upload packages to cowtransfer
      id: cowtransfer_packages
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_PACKAGES_TO_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress openwrt/bin/packages 2>&1 | tee cowtransfer_packages.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer_packages.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer_packages.log | grep https | cut -f3 -d" ")"

    - name: Upload packages to WeTransfer
      id: wetransfer_packages
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_PACKAGES_TO_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress openwrt/bin/packages 2>&1 | tee wetransfer_packages.log
        echo "::warning file=wetransfer.com::$(cat wetransfer_packages.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer_packages.log | grep https | cut -f3 -d" ")"

    - name: Generate release tag
      id: tag
      if: steps.zip.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_FIRMWARE_TO_COWTRANSFER = true ] && echo "ðŸ”— [Cowtransfer_firmware](${{ steps.cowtransfer_firmware.outputs.url }})" >> release.txt
        [ $UPLOAD_FIRMWARE_TO_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer_firmware](${{ steps.wetransfer_firmware.outputs.url }})" >> release.txt
        [ $UPLOAD_PACKAGES_TO_COWTRANSFER = true ] && echo "ðŸ”— [Cowtransfer_packages](${{ steps.cowtransfer_packages.outputs.url }})" >> release.txt
        [ $UPLOAD_PACKAGES_TO_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer_packages](${{ steps.wetransfer_packages.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}${{env.DEVICE_NAME}}
        body_path: release.txt
        files: |
          openwrt/bin/firmware.zip
          openwrt/bin/packages.zip

    # - name: Delete workflow runs
    #   uses: GitRML/delete-workflow-runs@main
    #   with:
    #     retain_days: 1
    #     keep_minimum_runs: 3

    # - name: Remove old Releases
    #   uses: dev-drprasad/delete-older-releases@v0.1.0
    #   if: env.UPLOAD_RELEASE == 'true' && !cancelled()
    #   with:
    #     keep_latest: 3
    #     delete_tags: true
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
